<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="InitScript" xml:space="preserve">
    <value>PRAGMA foreign_keys = off;
BEGIN TRANSACTION;

CREATE TABLE IF NOT EXISTS CurrentState (
    Id           VARCHAR (50) PRIMARY KEY
                              NOT NULL,
    State        INT          NOT NULL,
    CurrentTerm  INTEGER      NOT NULL,
    VotedFor     VARCHAR (50) NOT NULL,
    VotesCount   INT          NOT NULL,
    CommitIndex  INTEGER      NOT NULL,
    LastLogIndex INTEGER      NOT NULL,
    Timestamp    INTEGER      NOT NULL,
    ElectedTime  INTEGER
);


CREATE TABLE IF NOT EXISTS Logs (
    Id                   INTEGER       PRIMARY KEY AUTOINCREMENT
                                       NOT NULL,
    Hash                 VARCHAR (64)  NOT NULL,
    [Index]              INTEGER       NOT NULL,
    Term                 INTEGER       NOT NULL,
    PrevHash             VARCHAR (64)  NOT NULL,
    Commited             BOOLEAN       NOT NULL,
    Size                 INTEGER       NOT NULL,
    PublicKey            VARCHAR (200),
    Signature            VARCHAR (500) NOT NULL,
    SubmitterAddress     VARCHAR (50),
    LeaderId             VARCHAR (50),
    Timestamp            INTEGER       NOT NULL,
    Category             VARCHAR (20)  NOT NULL,
    SenderAddress        VARCHAR (50),
    ReceiverAddress      VARCHAR (50),
    LegalCurrency        VARCHAR (20),
    LegalCurrencyAmount  REAL (18, 4)  NOT NULL
                                       DEFAULT (0),
    CryptoCurrency       VARCHAR (20)  NOT NULL,
    CryptoCurrencyAmount REAL (18, 8)  DEFAULT (0) 
                                       NOT NULL,

    ExchangeRate         REAL          DEFAULT (0),
    TxTimestamp          INTEGER       DEFAULT (0) 
                                       NOT NULL,
    TxHash               VARCHAR (64) 
);


CREATE TABLE IF NOT EXISTS Peers (
    Id      VARCHAR (50)  PRIMARY KEY
                          NOT NULL,
    IP      VARCHAR (20)  NOT NULL,
    Port    INT           NOT NULL,
    ApiUri  VARCHAR (200) NOT NULL,
    IsLocal BOOLEAN       NOT NULL
);


CREATE TABLE IF NOT EXISTS TrustedClients (
    Id          INTEGER       PRIMARY KEY AUTOINCREMENT
                              NOT NULL,
    Address     VARCHAR (50)  UNIQUE
                              NOT NULL,
    Description VARCHAR (500) 
);


CREATE INDEX IF NOT EXISTS Logs_Category ON Logs (
    Category
);


CREATE INDEX IF NOT EXISTS Logs_Commited ON Logs (
    Commited
);


CREATE UNIQUE INDEX IF NOT EXISTS Logs_Hash ON Logs (
    Hash
);


CREATE INDEX IF NOT EXISTS Logs_Index ON Logs (
    "Index"
);


CREATE INDEX IF NOT EXISTS Logs_PrevHash ON Logs (
    PrevHash
);


CREATE INDEX IF NOT EXISTS Logs_Receiver ON Logs (
    ReceiverAddress
);


CREATE INDEX IF NOT EXISTS Logs_Sender ON Logs (
    SenderAddress
);


CREATE INDEX IF NOT EXISTS Logs_Term ON Logs (
    Term
);


CREATE INDEX IF NOT EXISTS Logs_TxHash ON Logs (
    TxHash
);


CREATE UNIQUE INDEX IF NOT EXISTS Peers_IP ON Peers (
    IP
);


CREATE INDEX IF NOT EXISTS Peers_IsLocal ON Peers (
    IsLocal
);


COMMIT TRANSACTION;
PRAGMA foreign_keys = on;</value>
  </data>
  <data name="MainnetConnectionString" xml:space="preserve">
    <value>Filename=./fiiipay.db; Mode=ReadWriteCreate;Cache=Shared;</value>
  </data>
  <data name="TestnetConnectionString" xml:space="preserve">
    <value>Filename=./fiiipay_test.db; Mode=ReadWriteCreate;Cache=Shared;</value>
  </data>
</root>